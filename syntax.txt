XPAth syntax : extracts from http://www.w3.org/TR/xpath

[1]   LocationPath			::=   RelativeLocationPath 
								| AbsoluteLocationPath 
[2]   AbsoluteLocationPath	::=   '/' RelativeLocationPath? 
								| AbbreviatedAbsoluteLocationPath 
[3]   RelativeLocationPath	::=   Step 
								| RelativeLocationPath '/' Step 
								| AbbreviatedRelativeLocationPath
[4]   Step					::=   AxisSpecifier NodeTest Predicate* 
								| AbbreviatedStep 
[5]   AxisSpecifier			::=   AxisName '::' 
								| AbbreviatedAxisSpecifier 
[6]   AxisName				::=   'ancestor' 
								| 'ancestor-or-self' 
								| 'attribute' 
								| 'child' 
								| 'descendant' 
								| 'descendant-or-self' 
								| 'following' 
								| 'following-sibling' 
								| 'namespace' 
								| 'parent' 
								| 'preceding' 
								| 'preceding-sibling' 
								| 'self'
[7]   NodeTest				::=   NameTest 
								| NodeType '(' ')' 
								| 'processing-instruction' '(' Literal ')'
[8]   Predicate				::=   '[' PredicateExpr ']' 
[9]   PredicateExpr			::=   Expr
[10]   AbbreviatedAbsoluteLocationPath	::=   '//' RelativeLocationPath 
[11]   AbbreviatedRelativeLocationPath	::=   RelativeLocationPath '//' Step 
[12]   AbbreviatedStep					::=   '.' | '..' 
[13]   AbbreviatedAxisSpecifier			::=   '@'?
[14]   Expr					::=   OrExpr 
[15]   PrimaryExpr			::=   VariableReference
								| '(' Expr ')' 
								| Literal 
								| Number 
								| FunctionCall
[16]   FunctionCall			::=   FunctionName '(' ( Argument ( ',' Argument )* )? ')' 
[17]   Argument				::=   Expr
[18]   UnionExpr			::=   PathExpr 
								| UnionExpr '|' PathExpr 
[19]   PathExpr				::=   LocationPath 
								| FilterExpr 
								| FilterExpr '/' RelativeLocationPath 
								| FilterExpr '//' RelativeLocationPath 
[20]   FilterExpr			::=   PrimaryExpr 
								| FilterExpr Predicate
[21]   OrExpr				::=   AndExpr 
								| OrExpr 'or' AndExpr 
[22]   AndExpr				::=   EqualityExpr 
								| AndExpr 'and' EqualityExpr 
[23]   EqualityExpr			::=   RelationalExpr 
								| EqualityExpr '=' RelationalExpr 
								| EqualityExpr '!=' RelationalExpr 
[24]   RelationalExpr		::=   AdditiveExpr 
								| RelationalExpr '<' AdditiveExpr 
								| RelationalExpr '>' AdditiveExpr 
								| RelationalExpr '<=' AdditiveExpr 
								| RelationalExpr '>=' AdditiveExpr
[25]   AdditiveExpr			::=   MultiplicativeExpr 
								| AdditiveExpr '+' MultiplicativeExpr 
								| AdditiveExpr '-' MultiplicativeExpr 
[26]   MultiplicativeExpr   ::=   UnaryExpr 
								| MultiplicativeExpr MultiplyOperator UnaryExpr 
								| MultiplicativeExpr 'div' UnaryExpr 
								| MultiplicativeExpr 'mod' UnaryExpr 
[27]   UnaryExpr			::=   UnionExpr 
								| '-' UnaryExpr
[28]   ExprToken			::=   '(' | ')' | '[' | ']' | '.' | '..' | '@' | ',' | '::' 
								| NameTest 
								| NodeType 
								| Operator 
								| FunctionName 
								| AxisName 
								| Literal 
								| Number 
								| VariableReference 
[29]   Literal				::=   '"' [^"]* '"' | "'" [^']* "'" 
[30]   Number				::=   Digits ('.' Digits?)? | '.' Digits 
[31]   Digits				::=   [0-9]+ 
[32]   Operator				::=   OperatorName 
								| MultiplyOperator 
							    | '/' | '//' | '|' | '+' | '-' | '=' | '!=' | '<' | '<=' | '>' | '>=' 
[33]   OperatorName			::=   'and' | 'or' | 'mod' | 'div' 
[34]   MultiplyOperator		::=   '*' 
[35]   FunctionName			::=    QName - NodeType 
[36]   VariableReference	::=   '$' QName 
[37]   NameTest				::=   '*' 
								| NCName ':' '*' 
								| QName 
[38]   NodeType				::=   'comment' 
								| 'text' 
								| 'processing-instruction' 
								| 'node' 
[39]   ExprWhitespace		::=   S

From XML (http://www.w3.org/TR/REC-xml#NT-S)

[3]    S					::=    (#x20 | #x9 | #xD | #xA)+
[84]    Letter				::=    BaseChar | Ideographic
[85]    BaseChar			::=    [#x0041-#x005A] | [#x0061-#x007A] | [#x00C0-#x00D6] | [#x00D8-#x00F6] | [#x00F8-#x00FF]
[86]    Ideographic			::=    [#x4E00-#x9FA5] | #x3007 | [#x3021-#x3029]
[87]    CombiningChar		::=    [#x0300-#x0345] | [#x0360-#x0361] | [#x0483-#x0486] | [#x0591-#x05A1] | [#x05A3-#x05B9] | [#x05BB-#x05BD] | #x05BF | [#x05C1-#x05C2] | #x05C4 | [#x064B-#x0652] | #x0670 | [#x06D6-#x06DC] | [#x06DD-#x06DF] | [#x06E0-#x06E4] | [#x06E7-#x06E8] | [#x06EA-#x06ED] | [#x0901-#x0903] | #x093C | [#x093E-#x094C] | #x094D | [#x0951-#x0954] | [#x0962-#x0963] | [#x0981-#x0983] | #x09BC | #x09BE | #x09BF | [#x09C0-#x09C4] | [#x09C7-#x09C8] | [#x09CB-#x09CD] | #x09D7 | [#x09E2-#x09E3] | #x0A02 | #x0A3C | #x0A3E | #x0A3F | [#x0A40-#x0A42] | [#x0A47-#x0A48] | [#x0A4B-#x0A4D] | [#x0A70-#x0A71] | [#x0A81-#x0A83] | #x0ABC | [#x0ABE-#x0AC5] | [#x0AC7-#x0AC9] | [#x0ACB-#x0ACD] | [#x0B01-#x0B03] | #x0B3C | [#x0B3E-#x0B43] | [#x0B47-#x0B48] | [#x0B4B-#x0B4D] | [#x0B56-#x0B57] | [#x0B82-#x0B83] | [#x0BBE-#x0BC2] | [#x0BC6-#x0BC8] | [#x0BCA-#x0BCD] | #x0BD7 | [#x0C01-#x0C03] | [#x0C3E-#x0C44] | [#x0C46-#x0C48] | [#x0C4A-#x0C4D] | [#x0C55-#x0C56] | [#x0C82-#x0C83] | [#x0CBE-#x0CC4] | [#x0CC6-#x0CC8] | [#x0CCA-#x0CCD] | [#x0CD5-#x0CD6] | [#x0D02-#x0D03] | [#x0D3E-#x0D43] | [#x0D46-#x0D48] | [#x0D4A-#x0D4D] | #x0D57 | #x0E31 | [#x0E34-#x0E3A] | [#x0E47-#x0E4E] | #x0EB1 | [#x0EB4-#x0EB9] | [#x0EBB-#x0EBC] | [#x0EC8-#x0ECD] | [#x0F18-#x0F19] | #x0F35 | #x0F37 | #x0F39 | #x0F3E | #x0F3F | [#x0F71-#x0F84] | [#x0F86-#x0F8B] | [#x0F90-#x0F95] | #x0F97 | [#x0F99-#x0FAD] | [#x0FB1-#x0FB7] | #x0FB9 | [#x20D0-#x20DC] | #x20E1 | [#x302A-#x302F] | #x3099 | #x309A 
[88]    Digit				::=    [#x0030-#x0039] | [#x0660-#x0669] | [#x06F0-#x06F9] | [#x0966-#x096F] | [#x09E6-#x09EF] | [#x0A66-#x0A6F] | [#x0AE6-#x0AEF] | [#x0B66-#x0B6F] | [#x0BE7-#x0BEF] | [#x0C66-#x0C6F] | [#x0CE6-#x0CEF] | [#x0D66-#x0D6F] | [#x0E50-#x0E59] | [#x0ED0-#x0ED9] | [#x0F20-#x0F29] 
[89]    Extender			::=    #x00B7 | #x02D0 | #x02D1 | #x0387 | #x0640 | #x0E46 | #x0EC6 | #x3005 | [#x3031-#x3035] | [#x309D-#x309E] | [#x30FC-#x30FE]

From Namespaces in XML (http://www.w3.org/TR/REC-xml-names/#NT-QName)

[4] NCName					::= (Letter | '_') (NCNameChar)* /* An XML Name, minus the ":" */ 
[5] NCNameChar				::= Letter | Digit | '.' | '-' | '_' | CombiningChar | Extender
[6] QName					::= (Prefix ':')? LocalPart 
[7] Prefix					::= NCName 
[8] LocalPart				::= NCName

===========================================================
Lexical structure (from http://www.w3.org/TR/xpath#exprlex)
===========================================================

When tokenizing, the longest possible token is always returned.

For readability, whitespace may be used in expressions even though not explicitly allowed by 
the grammar: ExprWhitespace may be freely added within patterns before or after any 
ExprToken.

The following special tokenization rules must be applied in the order specified to 
disambiguate the ExprToken grammar:

    * If there is a preceding token and the preceding token is not one of @, ::, (, [, , or an 
      Operator, then a * must be recognized as a MultiplyOperator and an NCName must be recognized as 
      an OperatorName.
    * If the character following an NCName (possibly after intervening ExprWhitespace) is (, then 
      the token must be recognized as a NodeType or a FunctionName.
    * If the two characters following an NCName (possibly after intervening ExprWhitespace) are ::, 
      then the token must be recognized as an AxisName.
    * Otherwise, the token must not be recognized as a MultiplyOperator, an OperatorName, a NodeType, 
      a FunctionName, or an AxisName.


============================
      Study in 8 bits
============================

1. Lexicographical elements
'*' | '::' | '/' | '//' | '|' | '+' | '-' | '=' | '!=' | '<' | '<=' | '>' | '>=' 
	| '$' | ':' | '(' | ')' | '[' | ']' | '.' | '..' | '@' | ',' | '_'

2. BaseChar :
  'A'..'Z' | 'a'..'z' | [0xc0 ... 0xff EXCEPT 0xd7 and 0xf7]

3. Letter : same as BaseChar

4. Digit :
   '0' .. '9' (ouf !)

5. Extender :
   0xb7 (une sorte de point central)

6. S
   (space | tab | cr | lf)+

7. CombiningChar
   aucun en 8 bits


